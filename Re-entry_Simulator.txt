//intense particle effects. :3

/**The Changelog!
 * 
 * v1: GUI, text intro, and clouds.
 * v2: Particles for fireball, death, and sound!
 * v3: Ocean added, tank size nerfed, mobile compatibility (doesn't really matter where you tap).
 * v4: Win screen? Too lazy to add parachute. :P
 * v5: Shows you how far down you got upon death.
 */

/**
 * First Voter: Radioactive_Man @ImAFanOfMar
 * Second Voter: Matthias (Soli Deo gloria) @MatthiasSaihttam
 * (Within margin of a minute. :o)
 */ 

var P_VI = 2; //Particle visibility (fireball).
var pause = true;
var paused = 100;
var deathY = 0;
var taps = 0;
var x = 0;
var y = 0;
var r = 0;
var xs = 0;
var ys = 20;
var rs = 0;
var heat = 0;
var heat2 = 0;
var camX = 0;
var camY = 0;
var fuel = 61;
var particles = [];
var explosions = [];
var explosion = function(x, y, s){
    this.x = x;
    this.y = y;
    this.s = s;
    this.state = 0;
    this.m = 0.05;
    this.m2 = 0.05;
    this.m3 = 0.2;
};
explosion.prototype.work = function(){
    switch(this.state){
        case 0:
            //playSound(getSound("retro/boom1"));
            this.state = 1;
        break;
        case 1:
            if(this.m3 < 1){
                this.m *= 1.4;
            }else{
                this.m *= 1.1;
            }
            noFill();
            stroke(0, 0, 0);
            strokeWeight(0.2);
            ellipse(this.x, this.y, this.m * this.s * this.m3, this.m * this.s * this.m3);
            stroke(255, 150, 0);
            strokeWeight(5);
            ellipse(this.x, this.y, this.m * this.s / 2.4 * this.m3, this.m * this.s / 2.4 * this.m3);
            noStroke();
            fill(255, 0, 0, 150);
            ellipse(this.x, this.y, this.m * this.s / 1.7 * this.m3, this.m * this.s / 1.7 * this.m3);
            fill(255, 150, 0, 150);
            ellipse(this.x, this.y, this.m * this.s / 3 * this.m3, this.m * this.s / 3 * this.m3);
            fill(255, 255, 0, 150);
            ellipse(this.x, this.y, this.m * this.s / 5 * this.m3, this.m * this.s / 5 * this.m3);
            if(this.m > 1){
                this.state = 2;
            }
        break;
        case 2:
        case 3:
            if(this.m3 < 1){
                this.m2 *= 1.4;
            }else{
                this.m2 *= 1.1;
            }
            noFill();
            stroke(0, 0, 0);
            strokeWeight(0.2);
            ellipse(this.x, this.y, (this.m - this.m2) * this.s * this.m3, (this.m - this.m2) * this.s * this.m3);
            stroke(255, 150, 0);
            strokeWeight(5);
            ellipse(this.x, this.y, (this.m - this.m2) * this.s / 2.4 * this.m3, (this.m - this.m2) * this.s / 2.4 * this.m3);
            noStroke();
            fill(255, 0, 0, 150 * this.m);
            ellipse(this.x, this.y, this.m * this.s / 1.7 * this.m3, this.m * this.s / 1.7 * this.m3);
            fill(255, 150, 0, 150 * this.m);
            ellipse(this.x, this.y, this.m * this.s / 3 * this.m3, this.m * this.s / 3 * this.m3);
            fill(255, 255, 0, 150 * this.m);
            ellipse(this.x, this.y, this.m * this.s / 5 * this.m3, this.m * this.s / 5 * this.m3);
            if(this.m2 > 1){
                this.state = 3;
            }
            if(this.state === 3){
                this.m /= 1.1;
                if(this.m < 0.05){
                    if(this.m3 > 0.5){
                        this.state = 4;
                    }else{
                        this.state = 1;
                        this.m3 = 1.2;
                        this.m = 0.05;
                        this.m2 = 0.05;
                    }
                }
            }
        break;
    }
};
var a_p = function(x, y, r, v, V, t, a, D){
    for(var k = 0; k < a; k ++){
        particles.push({x: x, y: y, xs: cos(r+random(-V, V))*v, ys: sin((r+random(-V, V))*v), t: t, d: D});
    }
};
var keyPressed = function(){
    if(pause){
        pause = false;
        loop();
    }
    if(fuel <= 0 || heat2 >= 250){
        return;
    }
    switch(keyCode){
        case 68:
        case 39:
            rs += 2.5;
            fuel --;
            a_p(200 + cos(r + 90) * -20, 300 + sin(r + 90) * -20, r+90, -5, 20, "t", 15, 200);
            playSound(getSound("retro/thruster-short"));
        break;
        case 65:
        case 37:
            rs -= 2.5;
            fuel --;
            a_p(200 + cos(r + 90) * -20, 300 + sin(r + 90) * -20, r+180, -5, 20, "t", 15, 200);
            playSound(getSound("retro/thruster-short"));
        break;
    }
};
var mousePressed = function(){
    if(pause){
        taps ++;
        if(taps > 1){
            pause = false;
            loop();
        }
    }else if(taps > 1 && fuel > 0 && heat2 < 250){
        playSound(getSound("retro/thruster-short"));
        fuel --;
        if(mouseX < 200){
            rs -= 2.5;
            a_p(200 + cos(r + 90) * -20, 300 + sin(r + 90) * -20, r+180, -5, 20, "t", 15, 200);
        }else{
            rs += 2.5;
            a_p(200 + cos(r + 90) * -20, 300 + sin(r + 90) * -20, r+90, -5, 20, "t", 15, 200);
        }
    }
};
rectMode(CENTER);
textAlign(CENTER, CENTER);
textFont(createFont("monospace"));
var beginning = random(0, 9999999999);
frameCount = beginning;
var draw = function() {
    if(abs(r) < 15){
        heat2 /= 1.05;
    }
    heat2 += abs( (r % 360) / 25);
    x += xs;
    y += ys;
    r += rs;
    r /= 1.05;
    //ys *= 1.01;
    camY -= ys / 4;
    rs += (noise(frameCount/50)*0.3 - 0.15)*2;
    background(0, 191, 255);
    pushMatrix();
    noStroke();
    translate(0, constrain(80000-y, 0, 80000));
    noStroke();
    fill(0, 150, 255);
    quad(-10, 450 + cos(frameCount)*17, 410, 450 + sin(frameCount/2)*15, 410, 10000, -10, 10000);
    fill(0, 100, 255);
    quad(-10, 500 + cos(frameCount)*17, 410, 500 + sin(frameCount)*15, 410, 10000, -10, 10000);
    resetMatrix();
    translate(200+x, 300 + ((y > 80000) ? (constrain(y, 80000, 80215)-80000 + cos(frameCount)*10) : 0));
    rotate(r);
    translate(0, 10);
    fill(201, 201, 201);
    bezier(20, -20, 40, 0, -40, 0, -20, -20);
    bezier(20, -20, 0, -40, 0, -40, -20, -20);
    noFill();
    strokeWeight(1);
    for(var i = 0; i < 5; i ++){
        stroke(i*heat, 0, 0);
        arc(0, -15+i, 45, 20, 0, 180);
    }
    noStroke();
    fill(0, 255, 255);
    ellipse(0, -20, 10, 10);
    fill(0, 0, 0, 40);
    arc(0, -20, 10, 10, -45, 140);
    fill(255, 255, 255, 30);
    pushMatrix();
    noStroke();
    fill(255, 0, 0, heat2);
    bezier(20, -20, 40, 0, -40, 0, -20, -20);
    bezier(20, -20, 0, -40, 0, -40, -20, -20);
    popMatrix();
    resetMatrix();
    if(x === 0){
        for(var k = 0; k < 15; k ++){
            particles.push({x: random(190, 210), y: random(290, 310) + abs(cos(r)*15), xs: round(random(-40, 40))/30, ys: -1, t: "a1", d: random(70, 150)});
        }
    }
    if(y > 80000){
        ys /= (ys > 1) ? 1.2 : 1;
        heat2 /= 5;
        x = 0.1;
        r /= 1.03;
        rs = 0;
    }
    for(var i = 0; i < particles.length; i ++){
        particles[i].ys -= 0.05;
        if(particles[i].t === "t"){
            fill(255, 255, 255, particles[i].d);
        }else if(particles[i].t === "a1"){
            fill(255, 0, 0, particles[i].d/P_VI);
            if(particles[i].d < 50){
                particles[i].t = "a2";
                particles[i].d = random(180, 220);
            }
        }else if(particles[i].t === "a2"){
            fill(255, 162, 0, particles[i].d/P_VI);
            particles[i].xs /= 1.1;
            particles[i].ys *= 1.02;
            if(particles[i].d < 150){
                particles[i].t = "a3";
                particles[i].d = 200;
            }
            particles[i].x -= (particles[i].x - 200)/30;
        }else{
            fill(255, 255, 0, particles[i].d/P_VI);
            particles[i].ys *= 1.02;
            particles[i].x -= (particles[i].x - 200)/50;
        }
        rect(particles[i].x, particles[i].y, 5, 5);
        particles[i].x += particles[i].xs;
        particles[i].y += particles[i].ys;
        particles[i].d -= 2;
        if(particles[i].d < 0 || particles[i].y < 0){
            particles.splice(i, 1);
        }
    }
    fill(255, 255, 255, 10);
    for(var i = -1200; i < 300; i += 2){
        if(noise(i/50) < 0.5){
            continue;
        }
        ellipse((noise(i/500)+frameCount*noise(i/500)) % 500 - 50, 600+(1.5*i+400 + camY*1.04) % 600, noise(i/50)*250, noise(i/500)*100);
        
    }
    popMatrix();
    for(var i = 0; i < explosions.length; i ++){
        explosions[i].work();
        if(explosions[i].state === 4){
            explosions.splice(i, 1);
        }
    }
    for(var i = 0; i > -2; i --){
        pushMatrix();
        translate(i*300, -2 * constrain(y-80000, 0, 1000));
        strokeWeight(5);
        stroke(255, 255, 255, 15);
        fill(140, 140, 140, 200);
        rect(350, 300, 55, 400, 5);
        fill(255, 255, 255, 200);
        textSize(20);
        if(i < 0 && fuel < 25){fill(255, 0, 0, 150);}
        text((i > -1) ? "ALT" : "FUEL", 350, 120);
        stroke(255, 255, 255, 120);
        line(350, 150, 350, 470);
        if(i < 0 && fuel < 25){stroke(255, 0, 0, 150);}
        line(350, (i > -1) ? constrain((y/250), 0, 320)+150 : -fuel*5.3 + 470, 350, 470);
        if(i < 0){ continue; }
        stroke(255, 0, 0, 120);
        line(345, constrain((deathY/250), 0, 320)+150, 355, constrain((deathY/250), 0, 320)+150);
        popMatrix();
    }
    resetMatrix();
    translate(0, constrain(80000-y, 0, 80000));
    noStroke();
    fill(0, 50, 255);
    quad(-10, 525 + cos(frameCount)*7, 410, 525 + sin(frameCount)*5, 410, 10000, -10, 1000);
    fill(0, 0, 255);
    quad(-10, 550 + sin(frameCount)*10, 410, 550 + cos(frameCount)*10, 410, 10000, -10, 10000);
    resetMatrix();
    //Text overlay
    if(pause || paused > 0){
        fill(0, 0, 0, paused);
        rect(0, 0, 9999, 9999);
        fill(255, 255, 255, 150*paused/100);
        textSize(55);
        text("Re-entry\nSimulator", 200, 100);
        textSize(20);
        text("Use\nA/D\nor\nLEFT/RIGHT\nto steer", 200, 270);
        text("A/D\n\nLEFT/RIGHT", 201, 271);
        text("Keep the heat shield\ndownwards, or you\nwill overheat.", 200, 400);
        text("         heat shield\ndownwards        \nwill          ", 201, 401);
        textSize(12);
        text("Press any key to begin.\nDouble tap/click for mobile controls.", 200, 500);
        if(!pause){
            paused --;
        }else{
            noLoop();
            fuel -= 1;
        }
    }else{
        if(heat < 50){
            heat += 0.7;
        }
        if(heat2 > 250){
            if(x === 0){
                explosions.push( new explosion(200, 300, 800) );
                particles = [];
                for(var k = 0; k < 1000; k ++){
                    particles.push({x: random(190, 210), y: random(290, 310) + abs(cos(r)*15), xs: random(-5, 5), ys: random(-5, 5), t: "a1", d: random(70, 150)});
                }
                P_VI = 1;
                playSound(getSound("retro/boom1"));
                println((y / 80000 * 100).toFixed(2) + " % completion");
                deathY = y;
            }
            x = 9999;
            ys /= 1.01;
        }
    }
    if(taps > 1){
        fill(255, 255, 255, constrain(frameCount-beginning, 0, 125));
        strokeWeight(10);
        stroke(255, 255, 255, constrain(frameCount-beginning, 0, 150));
        ellipse(100, 500, 150, 150);
        ellipse(300, 500, 150, 150);
        line(50, 500, 125, 450);
        line(50, 500, 125, 550);
        line(350, 500, 275, 450);
        line(350, 500, 275, 550);
    }
};
